(*Created on 2012/02/24
Imported from
/Users/guybillings/project_granule_layer/GRCpaper_working/figures/figure_plotting_fns.nb*)
(*This package contains custom plotting routines for dealing with Binary Partition Network data*) 

(* Mathematica Package *)
BeginPackage["Plotting`",{"BinaryPartitionNetworks`"}]
(* Exported symbols added here with SymbolName::usage *)

(* NOTES:
path:			 the path to datafiles
base:			 base name of datafiles
suf:			 file extension
mu:				 number BPN inputs
gamma:			 number BPN outputs
pini:			 start probability of the datafiles
pmax:			 final probability of the datafiles
pinc:			 the size of probability increment from pmini to pmax
*)

CnetLoad::usage="CnetLoad[path_,base_,suf_,mu_,gamma_,pini_,pmax_,pinc_,dini_,dmax_,bf_:0] Loads data from files generated by the C extension for efficient computation. \
(see cluster scripts for naming conventions). 'bf' is an option that permits the function handle files that are additionally defined across variable numbers of \
encoded events expressed as a fraction of the input capacity of the network. Default value is 0, for files that are for a fixed number of events."

doptimum::usage="doptimum[fileno_,info_,cost_,size_,patts_,conv_] Determines the maximal efficiency portrait. i.e. a No. connections by pon matrix of the maximal \
efficiencies for each network (across the different threshold settings). The fileno refers to the first index of 'info', incase info is a list of entropy data \
across differing sizes of networks, as can be provided by the function CnetLoad."

doptimumll::usage="doptimumll[fileno_,info_,cost_,sent_,size_,patts_,llfrac_,conv_] Determines the maximal efficiency portrait. i.e. a No. connections by pon matrix of the maximal \
efficiencies for each network (across the different threshold settings) in the case that some fraction llfrac of the event information must be encoded. \
The fileno refers to the first index of 'info', incase info is a list of entropy data \ 
across differing sizes of networks, as can be provided by the function CnetLoad."

doptimumfixedd::usage="doptimumfixedd[fileno_,info_,cost_,size_,patts_,conv_,d_] Determines the maximal efficiency for network with d connections per GC. \
i.e. a No. connections by pon matrix of the maximal efficiencies for each network (across the different threshold settings). \
The fileno refers to the first index of 'info', incase info is a list of entropy data across differing sizes of networks, as can be provided by the function CnetLoad." 

doptimumllfixedd::usage="doptimumllfixedd[fileno_,info_,cost_,sent_,size_,patts_,llfrac_,conv_,d_] Determines the maximal efficiency for network with d connections per GC.\
i.e. a No. connections by pon matrix of the maximal efficiencies for each network (across the different threshold settings) in the case that some fraction llfrac of the event information must be encoded. \
The fileno refers to the first index of 'info', incase info is a list of entropy data across differing sizes of networks, as can be provided by the function CnetLoad."

doptsparse::usage="doptsparse[fileno_,info_,cost_,sent_,size_,pinc_] Determines the sparsity associated with the networks in the optimal efficiency portrait, i.e. gives \
array of equal dimensions to the efficiency portrait but containing the associated sparsities. Returns array of portraits: \
{sparsity, fraction information encoded, sparsification index}"

doptsparsell::usage="doptsparsell[fileno_,info_,cost_,sent_,size_,pinc_,llfrac_] As doptsparse but in the case that llfrac of the event information must be encoded."

optsparse::usage="optsparse[fileno_,info_,sent_,size_,pini_,pinc_,llfrac_,omode_] Determines the minimal sparsity for each network in the data-set contained in 'info' such that\
llfrac of the event information is encoded. omode=maxes maximises sparsity across the thresholds, i.e. does not return data for all threshold settings"

optsparse2::usage="optsparse2[fileno_,info_,sent_,size_,pini_,pinc_,llfrac_] Minimum output sparsity required to encode all information for each number of connections across GC\
i.e. optimised across all values of input probability and threshold"

doptredun::usage="doptredun[fileno_,info_,cost_,size_,pinc_,\[Gamma]_,tc_] As doptsparse but caulculates the minimal total correlation"

optredun::usage="optredun[fileno_,info_,size_,pinc_,\[Gamma]_,tc_] As optsparse but for total correlation"

doptredunll::usage="doptredunll[fileno_,info_,cost_,sent_,size_,pinc_,g_,tc_,llfrac_] As doptsparsell but for total correlation."

optRpin::usage="optRpin[fileno_,info_,sent_,size_,pinc_,\[Gamma]_,ef_,omode_]"

doptpsep::usage="doptpsep[fileno_,info_,cost_,sep_,size_,pinc_] Pattern separation of the most efficient networks"

optpsep::usage="optpsep[ousep_,insep_,info_,sent_,\[Mu]_,\[Gamma]_,size_,pinc_,pini_,llfrac_,omode_] The best pattern separators - regardless of efficiency"

optnet::usage="optnet[cost_,ent_,xmin_,xmax_,xinc_,ymin_,ymax_,yinc_,demin_,demax_,deinc_] Optimal network as a function of the cost model \
dimensions: {delta,x,y,gamma,mu,d,pin}"

cartcoord::usage="cartcoord[x_,y_,z_,\[Alpha]_,\[Beta]_,\[Gamma]_,a_,b_,c_]"

tplot::usage="tplot[data_,deltamin_,xmin_,ymin_,deltamax_,xmax_,ymax_,deltainc_,xinc_,yinc_,dim_,dimmin_,dimmax_,diminc_]"

portraitplot::usage="portraitplot[data_,fs_,ft_,m_:0,llfrac_:0,maxent_:0,maxsent_:0,tickformat_:{{1,5,10,15,20},{{20,0.1},{100,0.5},{180,0.9}}}] \
Default tick format: {{1,5,10,15,20},{{20,0.1},{100,0.5},{180,0.9}}},mode=0 for standard plot, mode=1 for column normalisation, llfrac 0 to ignore\
full encoding or some fraction be encoded (in which case the maximum entropy data and max. source entropy need to be given"

maxinfo::usage="maxinfo[data_] Wrapper that turns entropy array (data) into a d by pin matrix of maximal information values"

SEPplot::usage="SEPplot[doptsm_,fs_,ft_,tickformat_]"

explorepoint::usage="explorepoint[baseplot_,delta_,x_,y_,deltamin_,deltamax_,deltainc_,xmin_,xmax_,xinc_,ymin_,ymax_,yinc_] plot a trilinear\
graph with single highlighted cost point"

paretopoints::usage="paretopoints[opt_,dopt_] Function to find the portrait index of networks in the Pareto frontier. \
Input a sparsity or pattern separation portrait (opt) and the efficiency portrait (dopt)."

paretoplot::usage="paretoplot[pp_,opt_,dopt_,res_,cfn_,cmode_]"

sparsityparetoplot::usage="sparsityparetoplot[pp_,opt_,dopt_,res_,cfn_,xmin_,xmax_,ymin_,ymax_,msparse_,off_] Must provide a table of Pareto points\
calculated for each input sparsity"

paretopoints3D::usage="paretopoints3D[data1_,data2_,data3_]"

paretoplot3Dprojection::usage="paretoplot3Dprojection[pp_,data1_,data2_,res_,cfn_,pmode_,cmode_]"

triparetoplot::usage="triparetoplot[pp_,data1_,data2_,data3_,cmode_]"

triparetoplot2::usage="triparetoplot2[pp_,data1_,data2_,data3_,res_,pal_,fst_,fsp_]"

meanppnets::usage="meanppnets[data_,pp3d_,maxd_]"
 
fulleff::usage="fulleff[info_,cost_]"

tradeoffplot::usage="tradeoffplot[data1_,data2_,data3_,raw1_,raw2_,raw3_,pp_,cfn1_,cfn2_,C1_,C2_,maxd_] Expects, raw1, raw2, and raw3 to have dimensions:\
{d,threshold,pin}. Circular permutations of datax and rawx, into position data1, raw1 etc make the quantitiy in data1 and raw1, the quantity that is \
prioritised in the trade-off"

limitpsparsity::usage="limitpsparsity[pp_,min_,max_,pinc_]"

pcodetable::usage="pcodetable[data1_,data2_,data3_,raw1_,raw2_,raw3_,pp_,pini_,pinc_] Properties of the coding in Pareto efficient networks when maximising\
p.sep or efficiency, {{{data1,thr_data1},{data2,thr_data2},{data3,thr_data3}},pin,{pout1,pout2,pout3}}"

prettycodetable::usage="prettycodetable[tabledata_] Print summary of coding in human readable form"

tradeoffchanges::usage="tradeoffchanges[data1_,data2_,data3_,raw1_,raw2_,raw3_,pp_,cfn1_,cfn2_,maxd_] Function to print array holding the change in pin and\
the change in \[Phi] for each network (i.e. d), when moving between the optimised quantities"

simplebar::usage="simplebar[data_,barcol_,op_,barwidth_,maxX_,maxY_,bcent_] If barwidth too small, not all bars are printed"

\[Mu]fromdex::usage="\[Mu]fromdex[dex_, pattfiles_, \[Mu]files_]"

plotcmat::usage="plotcmat[data_, pattfiles_, \[Mu]files_, font_]"

corrmat::usage="corrmat[networklist_, capacitylist_, pini_, pinc_, pmax_, dmax_, dini_, path_, base_, kmode_,bfmode_] Function to look over the network\
configurations to be examined,load data and correlate the portraits. Assumes the input size range is matched by the output size range. \
Sizelist in format {{mu1,gamma1},{mu2,gamma2},...{mun,gamman}}, capacity list matches each of these entries with a list of the available capacities for \
that network"

netstats::usage="netstats[poutfull_, sparsefull_, Rfull_, PRQfull_, corrfull_, pini_: 0, pinc_: 0, mode_: 1, pdex_: 0] Find the pin, pout, \
sparsification, partial redundancy, PRQ, pairwise correlation variance and pairwise correlation variance change of a specific net"

losslessrange::usage="losslessrange[sent_, ent_, llfrac_]"

sparsepatchplot::usage="sparsepatchplot[ent_,llfrac_,maxent_,maxsent_,fs_,ft_,fd_,thrmode_,emode_:0,smode_:0,gainmin_:1.0,gainmax_:1.0,gaininc_:0.1,offset_:0,frame_:True,tickformat_:{{1,5,10,15,20},{{1,0},{100,0.5},{199,1}}}]\
Default tick format: {{1,5,10,15,20},{{20,0.1},{100,0.5},{180,0.9}}},\
mode=0 for standard plot, mode=1 for column normalisation, llfrac = 0 to ignore full encoding or some fraction be encoded\
(in which case the maximum entropy data and max. source entropy need to be given)\
Function plots patches representing sparsification in the pin vs d plain for which llfrac of input information is encoded:\
Threshold modes: 0 - min (1), 1 - sequential (1 to d), 2 - Golgi cell, 3 - max (d)\
smode = 0: plot sparsification for networks that both fully encode the input and sparsify it,\
smode = 1: plot Pout for networks that both fully encode the input and sparsify it.\
smode = 2: plot RTC of outputs over RTC for inputs in networks that both fully encode and decrease RTC from inputs to outputs. \
(higher values are better, maximal value is 1)\
smode = 3: plot RTC for networks that fully encodode and decrease RTC from inputs to outputs.\
(lower values are better, min is 0, max is 1)\
emode = 0: plot regions according to setting of smode,\
emode = 1: plot regions of full encoding only\
offset =0: No tonic inhibition. >1, Floor[d/2] offset"

Plotinout::usage = "Plotinout[tc_, \[Mu]_, d_, \[Phi]_, \[Gamma]_, pon_, corr_] plots a sample of binary input and output patterns to visualise network activity as a raster.\
corr<=0, plots for uncorrelated inputs. corr > permits simple correlation structure in MFs with spatial extent chosen from exponential distribution with scale parameter 1/corr"

Plotefficiency::usage="Plotefficiency[meff, cost, info, fileno, maxd]: Creates a table of matrix plots of maximum efficiency of networks as calculated by EntSparseSize, \
held in info. meff is the maximum efficiency across all networks and normalises the colour scale in the matrix plots. cost is the cost of each network returned by Levycost.\
Where data has been loaded into an array indexed by filenumbers, the target file is specified by fileno. max d is the maximum value of d considered in the dataset."

hintonplot::usage = "hintonplot[areas_, colours_, colfunc_, pini_, b_: {-1}]"

showhintonplot::usage = "showhintonplot[T_,fs_,ticks_:{{{10, 2}, {20, 3}, {30, 4}}, {1, 5, 10, 15, 20},None,None}]"

rangeencoded::usage = "rangeencoded[encdata_] Operates on the output of information plots from sparsepatch (encdata) and determines the range of MF input activity over which all information is encoded \
where 'all information' is set by llfrac in sparsepatchplot"

rangesparseencoded::usage = "rangesparseencoded[encdata_] As rangencoded but also ensures that output activation is less than input activation, i.e. information must be fully encoded \
but the outputs must also be sparser than the inputs." 

minsparsifiedpout::usage = "minsparsifiedpout[optsdata_] Uses output acitvation (pout) plots from sparsepatchplot to determine the minimum GC activation in the range of MF activation over \
which information is fully encoded and representations are sparsified."

maxsparsifiedpout::usage = "maxsparsifiedpout[optsdata_] Uses output acitvation (pout) plots from sparsepatchplot to determine the maximum GC activation in the range of MF activation over \
which information is fully encoded and representations are sparsified."

meansparseencoded::usage = "meansparseencoded[encdata_] Determines the average output activation within the range of MF activation for which all information is encoded and a sparser
representation is formed"

minsparseencoded::usage = "minsparseencoded[encdata_] Determines the minimal output activation with the range of MF activation over which information is fully represented and sparsified"

maxsparseencoded::usage = "maxsparseencoded[encdata_] Determines the maximal output activation with the range of MF activation over which information is fully represented and sparsified"

markersfunc::usage = "markersfunc[series_, col_, smode_: 0, background_: None] Ranks series (i.e. Sorts in Ascending (smode=0) or Descending (smode=1)) and then determines the position of each\ 
ranking in the original series. Outputs the rank of each entry in the original list." 

indexedseries::usage = "indexedseries[indexseries_, series_,(*col_,*)smode_: 0] Generates series that is sorted by the ranking of indexseries"

Begin["`Private`"] 
(* Begin Private Context *)

(*INTERNAL FUNCTIONS*******************************************************************)
auxthresh[data_,mode_,pin_,d_,gain_]:=Switch[mode,"golgi",data[[GThreshold[pin, d, gain]]],"max",Max[data],"min",Min[data]]

gensent[mulist_, caplist_, pini_, pinc_, pmax_] := 
 Table[Table[
            Block[{$MaxPrecision = 400, $MaxExtraPrecision = 200}, 
                  Table[Sourceent[mulist[[mu]], 
                  	              pin, 
								  Uniquecodes[Table[PDF[BinomialDistribution[mulist[[mu]], pin], x], {x, 0, mulist[[mu]]}], mulist[[mu]], 2^(caplist[[c]]*mulist[[mu]])]], {pin, pini, pmax, pinc}]], 
				  {c,Dimensions[caplist][[1]]}], {mu, Dimensions[mulist][[1]]}]
     
genR[mulist_, caplist_, pini_, pinc_, pmax_] := 
 Table[Table[
   Block[{$MaxPrecision = 400, $MaxExtraPrecision = 200}, 
    Table[1-(Sourceent[mulist[[mu]], pin, 
      Uniquecodes[
       Table[PDF[BinomialDistribution[mulist[[mu]], pin], x], {x, 0, 
         mulist[[mu]]}], mulist[[mu]], 
       2^(caplist[[c]]*mulist[[mu]])]]/(mulist[[mu]]*Bitent[pin])), {pin, pini, pmax, pinc}]], {c,
     Dimensions[caplist][[1]]}], {mu, Dimensions[mulist][[1]]}]     
     
genDR[gamma_, Rinput_,info_,sourceent_,llfrac_, pini_, pinc_, pmax_]:=Module[{
         out,
         optRport},
         optRport=optRpin[1,info,sourceent,1,pinc,gamma,llfrac,"mins"]; 
         out=Table[Table[If[# > 0, Rinput[[pin]]/#, 0]&@optRport[[d]][[pin]],{pin,Dimensions[optRport][[2]]}],{d,Dimensions[optRport][[1]]}];
         out]

indexfromnet[n_, list_] := Position[Union[list[[All, 1]]], list[[n]][[1]]][[1]][[1]]

binmat[done_, dtwo_, s_] := 
Module[{rs, n, out = Table[Table[0, {m, 1, dtwo}], {n, 1, done}]}, 
   For[n = 1, n <= done, n++, rs = RandomSample[Range[dtwo], s]; 
                              out[[n]] = Table[If[MemberQ[rs, x], 1, 0], {x, 1, dtwo}]]; 
   out]
(*PACKAGE FUNCTIONS********************************************************************)
doptimum[fileno_,info_,cost_,size_,patts_,conv_]:=
Module[
	   {d, dims1 = Dimensions[info],dims2=Dimensions[info[[1]][[1]]],meff, eff,pdex},
	   meff=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}];
	   For[d=1,d<= dims1[[2]],d++,
	   	      For[pdex=1,pdex<= dims2[[4]],pdex++,
                   eff = Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]]/(conv*patts[[fileno]]*cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]]), 
                               {\[Phi], 1, d}]; 
                   meff[[d]][[pdex]] = Max[eff]]];
                   meff
      ]
(**************************************************************************************)
doptimumfixedd[fileno_,info_,cost_,size_,patts_,conv_,d_]:=
Module[{ dims1 = Dimensions[info],dims2=Dimensions[info[[1]][[1]]],meff, eff,pdex},
		meff=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}];
		For[pdex=1,pdex<= dims2[[4]],pdex++,
   						  eff = Table[
   						               Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]]/(conv*patts[[fileno]]*cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]]), 
   									 {\[Phi], 1, d}]; 
   					      meff[[d]][[pdex]] = Max[eff]];
   						  (*meff*)
   						  Position[ eff,Max[eff]]
   	   ]
(**************************************************************************************)
doptimumllfixedd[fileno_,info_,cost_,sent_,size_,patts_,llfrac_,conv_,d_]:=
Module[
	  { dims1 = Dimensions[info],dims2=Dimensions[info[[1]][[1]]],meff, eff,re,pdex},
	  eff=Table[Table[Table[0,{x,dims1[[2]]}],{y,dims2[[4]]}],{z,dims1[[2]]}];
	  meff=Table[Table[0,{x,dims2[[4]]}],{y,1,dims1[[2]]}];
	      For[pdex=1,pdex<= dims2[[4]],pdex++,
				re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
				re=Table[If[re[[\[Phi]]]>= (llfrac*sent[[pdex]]),re[[\[Phi]]],0],{\[Phi],d}];
   				eff[[d]][[pdex]]= Table[re[[\[Phi]]]/(conv*patts[[fileno]]*cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]]), {\[Phi], 1, d}];
   				meff[[d]][[pdex]] =Max[eff[[d]][[pdex]]]];
   				(*meff*)Position[ eff,Max[eff]]
   	  ]
(**************************************************************************************)
doptimumll[fileno_,info_,cost_,sent_,size_,patts_,llfrac_,conv_]:=
Module[
	  {d, dims1 = Dimensions[info],dims2=Dimensions[info[[1]][[1]]],meff, eff,re,pdex,mmode=2},
	  eff=Table[Table[Table[0,{x,dims1[[2]]}],{y,dims2[[4]]}],{z,dims1[[2]]}];
	  meff=Table[Table[0,{x,dims2[[4]]}],{y,1,dims1[[2]]}];
	  For[d=1,d<= dims1[[2]],d++,
	  	                 For[pdex=1,pdex<= dims2[[4]],pdex++,
										re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
										re=Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),re[[\[Phi]]],0],{\[Phi],d}];
   										eff[[d]][[pdex]]= Table[re[[\[Phi]]]/(conv*patts[[fileno]]*cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]]), {\[Phi], 1, d}];
   										meff[[d]][[pdex]] =Max[eff[[d]][[pdex]]]]];
   										meff
   	   ]
(**************************************************************************************)
doptsparse[fileno_,info_,cost_,sent_,size_,pinc_]:=
Module[
	  {d, dims1 = Dimensions[info],dims2=Dimensions[info[[1]][[1]]],eff,ent ,sp,pdex,opt\[Phi]},
	  sp=Table[Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}],{z,3}];
	  For[d=1,d<= dims1[[2]],d++,
	  	   For[pdex=1,pdex<= dims2[[4]],pdex++, 
              eff = Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]]/cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]], {\[Phi], d}];
              ent=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
              opt\[Phi]=Position[eff,Max[eff]][[1]][[1]]; 
              sp[[1]][[d]][[pdex]] =1-Pout[d,pinc*pdex,opt\[Phi]];
              sp[[2]][[d]][[pdex]]= ent[[opt\[Phi]]]/sent[[pdex]];
              sp[[3]][[d]][[pdex]]=-1+(1- Pout[d,pinc*pdex,opt\[Phi]])/(1-pdex*pinc)]];
              sp
      ]
(**************************************************************************************)
doptsparsell[fileno_,info_,cost_,sent_,size_,pinc_,llfrac_]:=
Module[
	   {d, dims1 = Dimensions[info], dims2 = Dimensions[info[[1]][[1]]],meff, eff,re,sp,pdex,opt\[Phi]},
	   sp=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}];
	   meff=Table[0,{x,1,dims1[[2]]}];
	   For[d=1,d<= dims1[[2]],d++,
	   	  For[pdex=1,pdex<= dims2[[4]],pdex++,
	   	  	  re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
	   	      re=Table[If[re[[\[Phi]]]>= (llfrac*sent[[pdex]]),re[[\[Phi]]],0],{\[Phi],d}];
              eff= Table[re[[\[Phi]]]/cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]], {\[Phi], 1, d}];
              opt\[Phi]=Position[eff,Max[eff]][[1]][[1]]; 
              sp[[d]][[pdex]] =If[Max[eff]!= 0,
              	                             Pout[d,pinc*pdex,opt\[Phi]],
              	                             0]
              	                             ]];
              sp
             ]
(**************************************************************************************)   
losslessrange[sent_, ent_, llfrac_] := 
Complement[Table[
	             If[ent[[x]] >= llfrac*Max[sent], x, -1], 
	            {x, 1, Max[Dimensions[sent]]}], 
	            {-1}]    
(**************************************************************************************)
optsparse[fileno_,info_,sent_,size_,pini_,pinc_,llfrac_,omode_,optswitch_,gain_:0]:=
Module[{d, 
		dims1 = Dimensions[info], 
		dims2 = Dimensions[info[[1]][[1]]],
		meff, 
		re,
		minpdex,
		sp,
		pdex,
		opt\[Phi],
		mmode=2},
		minpdex=Table[Min[losslessrange[sent, maxinfo[info[[1]]][[lld]], llfrac]],{lld,dims1[[2]]}];
		sp=Switch[omode,"maxes",Table[Table[{0,0,0},{x,dims2[[4]]}],{y,dims1[[2]]}],"mins",Table[Table[{0,0,0},{x,dims2[[4]]}],{y,dims1[[2]]}],"full",Table[Table[Table[{0,0,0},{x,dims2[[4]]}],{z,y}],{y,dims1[[2]]}]];
		meff=Table[0,{x,1,dims1[[2]]}];
		If[omode!="full",If[omode== "maxes",
			                              For[d=1,d<= dims1[[2]],d++,
			                              	   For[pdex=1,pdex<= dims2[[4]],pdex++,
			                              	   	re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];   
												sp[[d]][[pdex]][[1]]=auxthresh[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),Pout[d,pini+pinc*(pdex-1),\[Phi]],1],{\[Phi],d}],If[gain==0,"min","golgi"],pini+pinc*(pdex-1),d,gain];
												sp[[d]][[pdex]][[2]]=auxthresh[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),(*re[[\[Phi]]]**)(Pout[d,pini+pinc*(pdex-1),\[Phi]])/Switch[optswitch,1,((pini+(pdex-1)*pinc)),0,((pini+(minpdex[[d]]-1)*pinc))],0],{\[Phi],d}],If[gain==0,"max","golgi"],pini+pinc*(pdex-1),d,gain];
												sp[[d]][[pdex]][[3]] =auxthresh[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),(1-Pout[d,pini+pinc*(pdex-1),\[Phi]])/(1-Switch[optswitch,1,((pini+(pdex-1)*pinc)),0,((pini+(minpdex[[d]]-1)*pinc))])-1,0],{\[Phi],d}],If[gain==0,"max","golgi"],pini+pinc*(pdex-1),d,gain]]],
										  (*THIS code not used in practice and the measures not aligned with those in the 'maxes' block*)
										  For[d=1,d<= dims1[[2]],d++,
											   For[pdex=1,pdex<= dims2[[4]],pdex++,
												re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];   
												sp[[d]][[pdex]][[1]] =Max[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),Pout[d,pini+pinc*(pdex-1),\[Phi]],0],{\[Phi],d}]];
												sp[[d]][[pdex]][[2]] =Max[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),(*re[[\[Phi]]]**)(Pout[d,pini+pinc*(pdex-1),\[Phi]])/Switch[optswitch,1,((pini+(pdex-1)*pinc)),0,((pini+(minpdex[[d]]-1)*pinc))],0],{\[Phi],d}]];
												sp[[d]][[pdex]][[3]] =Max[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),(Pout[d,pini+pinc*(pdex-1),\[Phi]])/Switch[optswitch,1,((pini+(pdex-1)*pinc)),0,((pini+(minpdex[[d]]-1)*pinc))]-1,0],{\[Phi],d}]]]]],
																									(*Here the whole array is iterated and the full set of comparisons produced*)
						  For[d=1,d<= dims1[[2]],d++,
						  	  For[pdex=1,pdex<= dims2[[4]],pdex++,
						  	  	    re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];   
									Table[sp[[d]][[\[Phi]]][[pdex]][[1]] =If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),Pout[d,pini+pinc*(pdex-1),\[Phi]],0],{\[Phi],d}];
									Table[sp[[d]][[\[Phi]]][[pdex]][[2]] =If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),re[[\[Phi]]]*(1-Pout[d,pini+pinc*(pdex-1),\[Phi]])/(1-Switch[optswitch,1,((pini+(pdex-1)*pinc)),0,((pini+(minpdex[[d]]-1)*pinc))])-1,0],{\[Phi],d}];
									Table[sp[[d]][[\[Phi]]][[pdex]][[3]] =If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),(1-Pout[d,pini+pinc*(pdex-1),\[Phi]])/(1-Switch[optswitch,1,((pini+(pdex-1)*pinc)),0,((pini+(minpdex[[d]]-1)*pinc))])-1,0],{\[Phi],d}]]]];
									sp(*Subtract 1 so that no transformation gives 0*)
	   ]
(**************************************************************************************)	   
optsparse2[fileno_,info_,sent_,size_,pini_,pinc_,llfrac_]:=
Module[
	   {d, dims1 = Dimensions[info], dims2 = Dimensions[info[[1]][[1]]],re,sp,pdex},
	   sp=Table[0,{x,dims1[[2]]}];
	   For[d=1,d<= dims1[[2]],d++,
	   	   re=Table[Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}],{pdex,dims2[[4]]}];
	   	   sp[[d]]=Min[Table[Min[Table[If[re[[pdex]][[\[Phi]]]>= (llfrac*Max[sent]),Pout[d,pini+pinc*(pdex-1),\[Phi]],1],{\[Phi],d}]],{pdex,dims2[[4]]}]]];
	   	   sp]
(**************************************************************************************)
doptredun[fileno_,info_,cost_,size_,pinc_,\[Gamma]_,tc_]:=
Module[
	  {d, dims1 = Dimensions[info], dims2 = Dimensions[info[[1]][[1]]],eff,ent ,sp,pdex,opt\[Phi]},
	  sp=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}];
	  For[d=1,d<= dims1[[2]],d++,
	  	   For[pdex=1,pdex<= dims2[[4]],pdex++, 
               eff = Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]]/cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]], {\[Phi], 1, d}];
               ent=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
               opt\[Phi]=Position[eff,Max[eff]][[1]][[1]]; 
               sp[[d]][[pdex]] =1-ent[[opt\[Phi]]]/Sourceent[\[Gamma],Pout[d,pinc*pdex,opt\[Phi]],Uniquecodes[Table[PDF[BinomialDistribution[\[Gamma],Pout[d,pinc*pdex,opt\[Phi]]],x],{x,0,\[Gamma]}],\[Gamma],tc]]]];
               sp]
(**************************************************************************************)
optredun[fileno_,info_,size_,pinc_,\[Gamma]_,tc_]:=
Module[
	  {d, dims1 = Dimensions[info], dims2 = Dimensions[info[[1]][[1]]],ent ,sp,pdex,opt\[Phi]},
	  sp=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}];
	  For[d=1,d<= dims1[[2]],d++,
	  	 For[pdex=1,pdex<= dims2[[4]],pdex++, 
                   ent=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
                   sp[[d]][[pdex]]=
                     Block[{$MaxPrecision=500,$MaxExtraPrecision=500},
                     	   Max[Table[ent[[\[Phi]]]/Sourceent[\[Gamma],Pout[d,pinc*pdex,\[Phi]],Uniquecodes[Table[PDF[BinomialDistribution[\[Gamma],Pout[d,pinc*pdex,\[Phi]]],x],{x,0,\[Gamma]}],\[Gamma],tc]],{\[Phi],d}]]]
                     	   ]];
                   sp]
(**************************************************************************************)
optRpin[fileno_,info_,sent_,size_,pinc_,\[Gamma]_,ef_,omode_,gain_:0]:=
Module[{d, 
		dims1 = Dimensions[info], 
		dims2 = Dimensions[info[[1]][[1]]],
		ent,
		sp,
		pdex,
		opt\[Phi]
		},
		Switch[omode,"mins",sp=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[2]]}],"full",sp=Table[Table[Table[0,{x,dims2[[4]]}],{z,y}],{y,dims1[[2]]}]];
		For[d=1,d<= dims1[[2]],d++,For[pdex=1,pdex<= dims2[[4]],pdex++, 
   				ent=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
   				Switch[omode,"mins",
   									sp[[d]][[pdex]] =auxthresh[Table[If[ent[[\[Phi]]]>= ef*Max[sent],If[#== 0,1,1-(ent[[\[Phi]]]/#)]&@(\[Gamma]*Bitent[Pout[d,pinc*pdex,\[Phi]]]),2],{\[Phi],d}],If[gain==0,"min","golgi"],pinc*(pdex-1),d,gain],
   							 "full",
   									Table[sp[[d]][[\[Phi]]][[pdex]]=If[ent[[\[Phi]]]>= ef*Max[sent],If[#== 0,1,1-(ent[[\[Phi]]]/#)]&@(\[Gamma]*Bitent[Pout[d,pinc*pdex,\[Phi]]]),0],{\[Phi],d}]]]];
   			    Switch[omode,"mins",
   			            	        Thread[ReplaceAll[Thread[#],2->0]]&@sp,
   			            	 "full",
   			            	        sp]
      ]
(**************************************************************************************)
doptredunll[fileno_,info_,cost_,sent_,size_,pinc_,g_,tc_,llfrac_]:=
Module[
	  {d, dims1 = Dimensions[info],dims2 = Dimensions[info[[1]][[1]]],eff,re,sp,pdex,opt\[Phi],optout,oent},
	  sp=Table[Table[0,{x,dims2[[4]]}],{y,1,dims1[[2]]}];
	  For[d=1,d<= dims1[[2]],d++,
	  	 For[pdex=1,pdex<= dims2[[4]],pdex++,
	  	 	 re=Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];
	  	 	 re=Table[If[re[[\[Phi]]]>= (llfrac*sent[[pdex]]),re[[\[Phi]]],0],{\[Phi],d}];
             eff=Table[re[[\[Phi]]]/cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]], {\[Phi],d}];
             opt\[Phi]=Position[eff,Max[eff]][[1]][[1]];
             optout=Pout[d,pinc*pdex,opt\[Phi]];
             oent=If[optout== 0 || optout== 1,
             	                            0,
             	                            Sourceent[g,optout,Uniquecodes[Table[PDF[BinomialDistribution[g,optout],x],{x,0,g}],g,tc]]];
             sp[[d]][[pdex]]=1-(If[#>1,1,#]& @ If[oent== 0,0, If[re[[opt\[Phi]]]<0,0,re[[opt\[Phi]]]]/oent])]];
             sp]
(**************************************************************************************)
doptpsep[fileno_,info_,cost_,sep_,size_,pinc_]:=
Module[
	  {d, dims1 = Dimensions[sep],dims2=Dimensions[sep[[1]]],eff,sp,pdex,opt\[Phi]},
	  sp=Table[Table[0,{x,dims2[[3]]}],{y,dims1[[1]]}];
	  For[d=1,d<= dims1[[1]],d++,
	  	 For[pdex=1,pdex<= dims2[[3]],pdex++, 
             eff = Table[Flatten[info[[fileno]][[d]][[\[Phi]]], 1][[size]][[pdex]]/cost[[fileno]][[d]][[\[Phi]]][[size]][[pdex]], {\[Phi], d}];
             opt\[Phi]=Position[eff,Max[eff]][[1]][[1]]; 
             sp[[d]][[pdex]] =(*If[#<0,0,#]&@*)sep[[d]][[opt\[Phi]]][[size]][[pdex]]]];
             sp];
(**************************************************************************************)
optpsep[ousep_,insep_,info_,sent_,\[Mu]_,\[Gamma]_,size_,pinc_,pini_,llfrac_,omode_]:=
Module[
	  {d, dims1 = Dimensions[ousep],dims2=Dimensions[ousep[[1]]],sp,pdex,opt\[Phi],mmode=2,re},
	  Switch[omode,"maxes",
	  	                  sp=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[1]]}],
	  	           "mins",
	  	                  sp=Table[Table[0,{x,dims2[[4]]}],{y,dims1[[1]]}],
	  	           "full",
	  	                  sp=Table[Table[Table[0,{x,dims2[[4]]}],{z,y}],{y,dims1[[1]]}]];
	  	           For[d=1,d<= dims1[[1]],d++,
	  	           	      For[pdex=1,pdex<= dims2[[4]],pdex++,
	  	           	      	         re=Table[Flatten[info[[1]][[d]][[\[Phi]]], 1][[size]][[pdex]],{\[Phi],d}];    
                                     Switch[omode,"maxes",
                                     	                 sp[[d]][[pdex]]=Max[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),
                                     	                 	                                         (ousep[[d]][[\[Phi]]][[size]][[size]][[pdex]]/(Pout[d,(pini+pinc*(pdex-1)),\[Phi]]*\[Gamma]))/(insep[[pdex]]/((pini+pinc*(pdex-1))*\[Mu]))-1,
                                     	                 	                                         0],
                                     	                 	                      {\[Phi],d}]],
                                     	          "mins", 
                                     	                 sp[[d]][[pdex]] =Min[Table[If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),
                                     	                 	                                         (ousep[[d]][[\[Phi]]][[size]][[size]][[pdex]]/(Pout[d,(pini+pinc*(pdex-1)),\[Phi]]*\[Gamma]))/(insep[[pdex]]/((pini+pinc*(pdex-1))*\[Mu]))-1,
                                     	                 	                                         0],
                                     	                 	                       {\[Phi],d}]],
                                     	          "full",
                                     	                 Table[
                                     	                 	   sp[[d]][[\[Phi]]][[pdex]] =If[re[[\[Phi]]]>= (llfrac*Switch[mmode,1,sent[[pdex]],2,Max[sent]]),
                                     	                 	   	                                            (ousep[[d]][[\[Phi]]][[size]][[size]][[pdex]]/(Pout[d,(pini+pinc*(pdex-1)),\[Phi]]*\[Gamma]))/(insep[[pdex]]/((pini+pinc*(pdex-1))*\[Mu]))-1,
                                     	                 	   	                                            {0}],
                                     	                 	  {\[Phi],d}]]]];
                                     	                 	  sp(*Subtract 1 so that no transformation gives 0*)]
(**************************************************************************************)
CnetLoad[path_,base_,suf_,mu_,gamma_,pini_,pmax_,pinc_,dini_,dmax_,bf_:0]:=
Module[{tmp,out=Table[Table[{{Table[0,{p,pini,pmax,pinc}]}},{\[Phi],1,d}],{d,dini,dmax,1}],odims,d,\[Phi],p,debug=0,fullpath},
	   odims=Dimensions[out[[1]]];
	   For[p=1,p<= odims[[4]],p++,
	   	      For[d=dini,d<= dmax,d++,
	   	      	             If[bf== 0,
	   	      	             	   fullpath=path<>base<>ToString[d]<>"_"<>ToString[mu]<>"_"<>ToString[gamma]<>"_"<>ToString[p*pinc]<>suf,
	   	      	             	   fullpath=path<>base<>ToString[d]<>"_"<>ToString[mu]<>"_"<>ToString[gamma]<>"_"<>ToString[p*pinc]<>"_"<>ToString[bf]<>suf];
	   	      	             Switch[debug,0,Null,1,Print[fullpath]];tmp=Check[Flatten[Import[fullpath]],Print[fullpath]];
	   	      	             For[\[Phi]=1,\[Phi]<= d,\[Phi]++,out[[d-dini+1]][[\[Phi]]][[1]][[1]][[p]]=tmp[[\[Phi]]]]]];
	   	      	             out]
(**************************************************************************************)
optnet[cost_,ent_,xmin_,xmax_,xinc_,ymin_,ymax_,yinc_,demin_,demax_,deinc_]:=
Module[{ddex,xdex,ydex,maxes=Table[Table[Table[0,{y,1+((ymax-ymin)/yinc)}],{1+((xmax-xmin)/xinc)}],{1+((demax-demin)/deinc)}],dopts},
	   For[ddex=1,ddex<= 1+((demax-demin)/deinc),ddex++,
	   	   For[xdex=1,xdex<= 1+((xmax-xmin)/xinc),xdex++,
	   	   	   For[ydex=1,ydex<= 1+((ymax-ymin)/yinc),ydex++,
	   	   	   	    dopts=Table[Table[doptimum[1,{ent[[x]][[y]]},{cost[[ddex]][[xdex]][[ydex]][[x]][[y]]},1,{1000000000},1/1000000000],{x,Dimensions[ent][[1]]}],{y,Dimensions[ent][[2]]}];
	   	   	   	    maxes[[ddex]][[xdex]][[ydex]]=Position[dopts,Max[dopts]]]]];
	   	   	   	    maxes]
(**************************************************************************************)
cartcoord[x_,y_,z_,\[Alpha]_,\[Beta]_,\[Gamma]_,a_,b_,c_]:=((\[Alpha]*x/(\[Alpha]*x+\[Beta]*y+\[Gamma]*z))*a)+((\[Beta]*y/(\[Alpha]*x+\[Beta]*y+\[Gamma]*z))*b)+((\[Gamma]*z/(\[Alpha]*x+\[Beta]*y+\[Gamma]*z))*c)
(**************************************************************************************)
tplot[data_,deltamin_,xmin_,ymin_,deltamax_,xmax_,ymax_,deltainc_,xinc_,yinc_,dim_,dimmin_,dimmax_,diminc_]:=
Module[
	   {coords,dims=Dimensions[data],a={0,0},
        b={1,0},
        c={0.5,Sqrt[3]/2},
        pnts,frame,ft:=ColorData["TemperatureMap"],colors,labels,barycent\[Alpha],barycent\[Beta],barycent\[Gamma]},
        barycent\[Alpha]=Total[Sqrt[(c-b)^2]];
		barycent\[Beta]=Total[Sqrt[(a-c)^2]];
		barycent\[Gamma]=Total[Sqrt[(b-a)^2]];
		colors=Flatten[Table[Table[Table[(diminc*(data[[delta]][[x]][[y]][[1]][[dim]]-1)+dimmin)/(dimmax-dimmin),{delta,dims[[1]]}],{x,dims[[2]]}],{y,dims[[3]]}]];
		coords=Flatten[Table[
			            Table[
			           	 Table[
			           	    cartcoord[(deltainc*(delta))/(deltamax-deltamin+1),(xinc*(x))/(xmax-xmin+1),(yinc*(y))/(ymax-ymin+1),barycent\[Alpha],barycent\[Beta],barycent\[Gamma],a,b,c],
			           	 {delta,dims[[1]]}],
			           	{x,dims[[2]]}],
			           {y,dims[[3]]}],2];
	    pnts=Graphics[{PointSize[Large],Table[{ft[colors[[x]]],Disk[coords[[x]],0.01]},{x,Dimensions[coords][[1]]}]},ImageSize->300];
	    frame=Graphics[{Thick,Line[{{0,0},{1,0},{0.5,Sqrt[3]/2},{0,0}}]},ImageSize->300];
	    labels=Graphics[{Text[Style["\[Delta]",
	    	                  FontFamily->"Helvetica",
	    	                  FontWeight->Bold,
	    	                  FontSize->25],
	    	             {-0.03,-0.03}],
	    	             Text[Style["y",
	    	            	  FontFamily->"Helvetica",
	    	            	  FontWeight->Bold,
	    	            	  FontSize->25],
	    	             {0.5,0.91}],
	    	             Text[Style["x",
	    	             	  FontFamily->"Helvetica",
	    	             	  FontWeight->Bold,
	    	             	  FontSize->25],
	    	             {1.03,-0.03}]}];
	    Show[frame,labels,pnts]]
(**************************************************************************************)
portraitplot[data_,fs_,ft_,frame_:True,m_:0,llfrac_:0,maxent_:0,maxsent_:0,tickformat_:{{1,5,10,15,20},{{1,0},{100,0.5},{199,1}}}]:=
Module[
	{D,
	 pvals=Dimensions[data][[2]],
	 dvals=Dimensions[data][[1]]},
	D=If[m== 0,data/Max[data],Transpose[Table[If[Max[#]>0,#/Max[#],Table[0,{x,dvals}]]&@ Transpose[data][[i]],{i,pvals}]]];
	D=If[llfrac== 0,D,Table[Table[If[maxent[[d]][[p]]<llfrac*maxsent,-1,D[[d]][[p]]],{p,pvals}],{d,dvals}]];
	MatrixPlot[
		D,
		DataReversed->{True,False},
		AspectRatio->1,
		FrameLabel->{Style["Synaptic Connections",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],
			         Style["p(MF)",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold]},
		ColorFunction->(If[llfrac== 0,If[#<= -1/Max[data],Gray,ft[#]]&,If[#<=-1/Max[data],Gray,ft[#]]&]),
		ColorFunctionScaling->False,
		FrameTicks->tickformat,
		Switch[frame,True,
			              FrameTicksStyle->Directive[FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],
			         False,
			              Frame->frame]]]
(**************************************************************************************)		              
sparsepatchplot[ent_,llfrac_,maxent_,sent_,fs_,ft_,fd_,thrmode_,emode_:0,smode_:0,gainmin_:1.0,gainmax_:1.0,gaininc_:0.1,offset_:0,mu_:0,gamma_:0,frame_:True,tickformat_:{{1,5,10,15,20},{{1,0},{100,0.5},{199,1}}}]:=
Module[
	{D,
	 FST=0, (*Internal switch to turn ploting on or off, set to off for fast server application*)	
	 maxsent=Max[sent],	
	 pvals=Dimensions[maxent][[2]],
	 dvals=Dimensions[maxent][[1]],
	 pinc=tickformat[[2]][[2]][[2]]/tickformat[[2]][[2]][[1]],
	 fullyencod,
	 sparsified,
	 odim,
	 dex,
	 plots,
	 ftns,
	 gtab=Table[g,{g,gainmin,gainmax,gaininc}]},If[(smode == 2 || smode == 3) && (mu == 0 || gamma == 0), Print["smode =2 but network geometry not set. Set mu and gamma."];Abort[],Null];
	If[thrmode==2,
				fullyencod=Table[
								DeleteCases[Flatten[Table[Table[If[(If[#<d,0,#]&@ent[[1]][[d]][[GThreshold[p*pinc,d,g,offset]]][[1]][[1]][[p]])<llfrac*maxsent,-1,{d,p}],{p,pvals}],{d,dvals}],1],-1],
				    			{g,gainmin,gainmax,gaininc}],
				fullyencod=Table[
								DeleteCases[Flatten[Table[Table[If[ent[[1]][[d]][[thr]][[1]][[1]][[p]]<llfrac*maxsent,-1,{d,p}],{p,pvals}],{d,thr,If[thrmode==3,thr,dvals]}],1],-1],
				    			{thr,Switch[thrmode,0,1,1,1,3,1],Switch[thrmode,0,1,1,dvals,3,dvals]}]
				];
	If[thrmode==2,
				sparsified=Table[
									   Flatten[
		        		    	   	          Table[(If[#>If[emode==0,0.000001,-2],
		        	    	   		          	           Switch[smode,0,#,
		        	    	   		          	           	            1,Pout[
		        	     	 	 	          	                  			fullyencod[[gdex]][[dex]][[1]],
		        	     	 	 	          	                  			fullyencod[[gdex]][[dex]][[2]]*pinc,
		        	     	 	 	          	                  			GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]],
		        	     	 	 	          	                  		2,#,
		        	     	 	 	          	                  		3,(1-(ent[[1]][[fullyencod[[gdex]][[dex]][[1]]]][[GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]]][[1]][[1]][[fullyencod[[gdex]][[dex]][[2]]]]
		        	     	 	 	          	                  			                 /(gamma*Bitent[Pout[
		        	     	 	 	          	                  			                 fullyencod[[gdex]][[dex]][[1]],
		        	     	 	 	          	                  			                 fullyencod[[gdex]][[dex]][[2]]*pinc,
		        	     	 	 	          	                  			                 GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]]])))
		        	    	   		          	           		],
		        	       		    	      	      -1
		        	     	 	 	          	      ]&@If[smode==0 || smode ==1,(((1-Pout[
		        	     	 	 	          	                                            fullyencod[[gdex]][[dex]][[1]],
		        	     	 	 	          	                                            fullyencod[[gdex]][[dex]][[2]]*pinc,
		        	     	 	 	          	                                            GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]])
		        	     	 	 	          	                                            /(1-fullyencod[[gdex]][[dex]][[2]]*pinc))-1),
		        	     	 	 	          	                                     1-(1-(ent[[1]][[fullyencod[[gdex]][[dex]][[1]]]][[GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]]][[1]][[1]][[fullyencod[[gdex]][[dex]][[2]]]]
		        	     	 	 	          	                  			                 /(gamma*Bitent[Pout[
		        	     	 	 	          	                  			                 fullyencod[[gdex]][[dex]][[1]],
		        	     	 	 	          	                  			                 fullyencod[[gdex]][[dex]][[2]]*pinc,
		        	     	 	 	          	                  			                 GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]]])))
		        	     	 	 	          	                  			                 /(1-(sent[[fullyencod[[gdex]][[dex]][[2]]]]
		        	     	 	 	          	                  			                             /(mu*Bitent[fullyencod[[gdex]][[dex]][[2]]*pinc])))]),
		       	        			          {dex,Dimensions[fullyencod[[gdex]]][[1]]}],		       			   	    	          
		       	 	    		              1],
								{gdex, Dimensions[fullyencod][[1]]}],
				sparsified=Table[
									   Flatten[
		        		    	   	          Table[If[#>If[emode==0,0.000001,-2],
		        	    	   		          	           Switch[smode,0,#,
		        	    	   		          	           	            1,Pout[fullyencod[[thr]][[dex]][[1]],
		        	    	   		          	           	            	   fullyencod[[thr]][[dex]][[2]]*pinc,
		        	    	   		          	           	            	   Switch[thrmode,0,thr,1,thr,3,fullyencod[[thr]][[dex]][[1]]]],
		        	    	   		          	           	            2,#,
		        	    	   		          	           	            3,(1-(ent[[1]][[fullyencod[[gdex]][[dex]][[1]]]][[Switch[thrmode,0,thr,1,thr,3,fullyencod[[thr]][[dex]][[1]]]]][[1]][[1]][[fullyencod[[gdex]][[dex]][[2]]]]
                                                                                                               /(mu*Bitent[Pout[
		        	     	 	 	          	                  			                                   fullyencod[[gdex]][[dex]][[1]],
		        	     	 	 	          	                  			                                   fullyencod[[gdex]][[dex]][[2]]*pinc,
		        	     	 	 	          	                  			                                   GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]]])))	   	   
		        	    	   		          	           		 ], 
		        	       		    	      	          -1
		        	     	 	 	          	      ]&@If[smode==0 || smode ==1,(((1-Pout[fullyencod[[thr]][[dex]][[1]],
		        	     	 	 	          	                   							fullyencod[[thr]][[dex]][[2]]*pinc,
		        	     	 	 	          	                   							Switch[thrmode,0,thr,1,thr,3,fullyencod[[thr]][[dex]][[1]]]])/(1-fullyencod[[thr]][[dex]][[2]]*pinc))-1),
		        	     	 	 	          	                   							1-(1-(ent[[1]][[fullyencod[[gdex]][[dex]][[1]]]][[Switch[thrmode,0,thr,1,thr,3,fullyencod[[thr]][[dex]][[1]]]]][[1]][[1]][[fullyencod[[gdex]][[dex]][[2]]]]
                                                                                                               /(mu*Bitent[Pout[
		        	     	 	 	          	                  			                                   fullyencod[[gdex]][[dex]][[1]],
		        	     	 	 	          	                  			                                   fullyencod[[gdex]][[dex]][[2]]*pinc,
		        	     	 	 	          	                  			                                   GThreshold[fullyencod[[gdex]][[dex]][[2]]*pinc,fullyencod[[gdex]][[dex]][[1]],gtab[[gdex]],offset]]])))
		        	     	 	 	          	                  			                /(1-(sent[[fullyencod[[gdex]][[dex]][[2]]]]/(mu*Bitent[fullyencod[[gdex]][[dex]][[2]]*pinc])))],
		       	        			          {dex,Dimensions[fullyencod[[thr]]][[1]]}],		       			   	    	          
		       	 	    		              1],
								{thr,Switch[thrmode,0,1,1,1,3,1],Switch[thrmode,0,1,1,dvals,3,dvals]}]
				];     
	D=Table[Table[Table[-1,{p,pvals}],{d,dvals}],{dex,Dimensions[sparsified][[1]]}];
	For[odim=1,odim<=Dimensions[sparsified][[1]],odim++,
		                                  For[dex=1,dex<=Dimensions[sparsified[[odim]]][[1]],dex++,
		                                  	                         D[[odim]][[fullyencod[[odim]][[dex]][[1]]]][[fullyencod[[odim]][[dex]][[2]]]]=Switch[emode,0,sparsified[[odim]][[dex]],1,1]
		                                     ];
       ];
   If[FST==0,      
	ftns=Table[Lighter[fd[odim], #]&,{odim,Dimensions[sparsified][[1]]}];                  	                         
	plots=If[thrmode==3,Table[MatrixPlot[
		If[Total[Total[D[[odim]]]]==-Dimensions[Flatten[D[[odim]]]][[1]],D[[odim]],D[[odim]]/Max[D]],
		DataReversed->{True,False},
		AspectRatio->1,
		FrameLabel->{Style["GC dendrites",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],Style["p(MF)",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold]},
		ColorFunction->(If[llfrac==0,ft[#]&,If[#<0,Transparent,ft[#]]&]),
		ColorFunctionScaling->False,
		FrameTicks->tickformat,
		Switch[frame,True,
			              FrameTicksStyle->Directive[FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],
			         False,
			              Frame->frame]],{odim,Dimensions[sparsified][[1]]}],
		Table[MatrixPlot[
		If[Total[Total[D[[odim]]]]==-Dimensions[Flatten[D[[odim]]]][[1]],D[[odim]],D[[odim]]/Max[D]],
		DataReversed->{True,False},
		AspectRatio->1,
		FrameLabel->{Style["Synaptic Connections",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],Style["p(MF)",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold]},
		ColorFunction->(If[llfrac== 0,ft[#]&,If[#<0,Transparent,ftns[[odim]][Switch[emode,0,#,1,0]]]&]),
		(*ColorFunction->(If[llfrac==0,ft[#]&,If[#<0,Transparent,ft[#]]&]),*)
		ColorFunctionScaling->False,
		FrameTicks->tickformat,
		Switch[frame,True,
			              FrameTicksStyle->Directive[FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],
			         False,
			              Frame->frame]],{odim,Dimensions[sparsified][[1]]}]],
	plots=Null];{fullyencod,sparsified,plots}]
(**************************************************************************************)
maxinfo[data_]:=Table[Table[Max[Table[data[[d]][[\[Phi]]][[1]][[1]][[p]],{\[Phi],d}]],{p,Dimensions[data[[1]]][[4]]}],{d,Dimensions[data][[1]]}]
(**************************************************************************************)
SEPplot[doptsm_,fs_,ft_,tickformat_]:=MatrixPlot[doptsm/Max[Abs[doptsm]],
	                                             DataReversed->{True,False},
	                                             AspectRatio->1,
	                                             FrameLabel->{Style["No. Connections",
	                                             	                FontFamily->"Helvetica",
	                                             	                FontSize->fs,
	                                             	                FontWeight->Bold],
	                                             	          Style[Subscript["P","in"],
	                                             	          	    FontFamily->"Helvetica",
	                                             	          	    FontSize->fs,
	                                             	          	    FontWeight->Bold]},
	                                             ColorFunction->ft,
	                                             ColorFunctionScaling->False,
	                                             FrameTicks->tickformat,
	                                             FrameTicksStyle->Directive[FontFamily->"Helvetica",
	                                             	                        FontSize->fs,
	                                             	                        FontWeight->Bold]
	                                            ]
(**************************************************************************************)
explorepoint[baseplot_,delta_,x_,y_,deltamin_,deltamax_,deltainc_,xmin_,xmax_,xinc_,ymin_,ymax_,yinc_]:=
Module[{netcoord,
	    a={0,0},
		b={1,0},
		c={0.5,1},
		netpnt,
		barycent\[Alpha],
		barycent\[Beta],
		barycent\[Gamma]},
		barycent\[Alpha]=Total[Sqrt[(c-b)^2]];
		barycent\[Beta]=Total[Sqrt[(a-c)^2]];
		barycent\[Gamma]=Total[Sqrt[(b-a)^2]];
		netcoord=cartcoord[(deltainc*delta)/(deltamax-deltamin),(xinc*x)/(xmax-xmin),(yinc*y)/(ymax-ymin),barycent\[Alpha],barycent\[Beta],barycent\[Gamma],a,b,c];
		netpnt=Graphics[{PointSize[Large],Black,Disk[netcoord,0.01]},ImageSize->300];
		Show[baseplot,netpnt]
	  ]
(**************************************************************************************)
paretopoints[opt_,dopt_]:=Module[{ppoints=Table[{1-Flatten[opt][[x]],1-Flatten[dopt][[x]]},{x,Dimensions[Flatten[dopt]][[1]]}],
								  plist,
								  front,
								  format=Dimensions[Dimensions[dopt]][[1]],
								  pvals,
								  portraitcoords},
							      pvals=If[format>1,Dimensions[dopt][[2]],1];
							      plist=Table[And@@Thread[
							      	                    Not[
							      	                      Thread[
							      	                        Thread[
							      	                           ((ppoints[[x,1]]>=#&/@ppoints[[All,1]])&&(ppoints[[x,2]]>=#&/@ppoints[[All,2]]))
							      	                              ]
							      	                              &&
							      	                        Thread[
							      	                           ((ppoints[[x,1]]>#&/@ppoints[[All,1]])||(ppoints[[x,2]]>#&/@ppoints[[All,2]]))
							      	                              ]
							      	                            ]
							      	                       ]
							      	                      ],
							      	          {x,Dimensions[ppoints][[1]]}];
							      front=Flatten[Position[plist,True]];
							      portraitcoords=If[format>1,{1+(#-Mod[#,pvals])/pvals,Mod[#,pvals]},{#,1}]&/@front;
							      {front,portraitcoords}]
(**************************************************************************************)
paretoplot[pp_,opt_,dopt_,res_,cfn_,cmode_]:=Module[{paretomarkers=
													 Table[Text[Style[ToString[pp[[2]][[All,1]][[x]]],
													 	FontFamily->font,
													 	FontWeight->Bold,
													 	FontSize->10,
													 	Switch[cmode,"simple",Black,"sparsity",cfn[pp[[2]][[All,2]][[x]]/Dimensions[dopt][[2]]]]]],{x,1,Dimensions[pp[[2]][[All,1]]][[1]],res}]},
													 	ListPlot[Table[{{Flatten[opt][[pp[[1]][[x]]]],Flatten[dopt][[pp[[1]][[x]]]]}},{x,1,Dimensions[pp[[1]]][[1]],res}],
													 		PlotMarkers->paretomarkers,
													 		PlotRange->All,
													 		AxesOrigin->{0,0}]
													]
(**************************************************************************************)
sparsityparetoplot[pp_,opt_,dopt_,res_,cfn_,xmin_,xmax_,ymin_,ymax_,msparse_,off_]:=
Module[{grs,
	    paretomarkers=Table[Table[Text[Style[ToString[pp[[sp]][[2]][[All,1]][[x]]],FontFamily->font,FontWeight->Bold,FontSize->10,cfn[(sp+off)/msparse]]],{x,1,Dimensions[pp[[sp]][[2]][[All,1]]][[1]],res}],{sp,Dimensions[pp][[1]]}]},
	    grs=Table[ListPlot[Table[{{Flatten[opt[[All,sp]]][[pp[[sp]][[1]][[x]]]],Flatten[dopt[[All,sp]]][[pp[[sp]][[1]][[x]]]]}},{x,1,Dimensions[pp[[sp]][[1]]][[1]],res}],
	    	               PlotMarkers->paretomarkers[[sp]],
	    	               PlotRange->{{xmin,xmax},{ymin,ymax}},
	    	               AxesOrigin->{0,0}],{sp,Dimensions[pp][[1]]}];
	    Show[grs]]
(**************************************************************************************)
(*zero efficiency points are removed*)
paretopoints3D[data1_,data2_,data3_]:=Module[{ppoints=Table[{1-Flatten[data1][[x]],1-Flatten[data2][[x]],1-Flatten[data3][[x]]},{x,Dimensions[Flatten[data1]][[1]]}],
	                                          plist,
	                                          front,
	                                          format=Dimensions[Dimensions[data1]][[1]],
	                                          pvals,
	                                          portraitcoords},
	                                          pvals=If[format>1,Dimensions[data1][[2]],1];
	                                          plist=Table[And@@Thread[
	                                          	                      Not[
	                                          	                      	  Thread[
	                                          	                      	  	     Thread[(((ppoints[[x,1]]>=#&/@ppoints[[All,1]])
	                                          	                      	  	     	    &&
	                                          	                      	  	     	    (ppoints[[x,2]]>=#&/@ppoints[[All,2]]))
	                                          	                      	  	     	    &&
	                                          	                      	  	     	    (ppoints[[x,3]]>=#&/@ppoints[[All,3]]))
	                                          	                      	  	     	   ]
	                                          	                      	  	     	&&
	                                          	                      	  	     Thread[(((ppoints[[x,1]]>#&/@ppoints[[All,1]])
	                                          	                      	  	     	    ||
	                                          	                      	  	     	    (ppoints[[x,2]]>#&/@ppoints[[All,2]]))
	                                          	                      	  	     	    ||
	                                          	                      	  	     	    (ppoints[[x,3]]>#&/@ppoints[[All,3]]))
	                                          	                      	  	     	   ]
	                                          	                      	  	    ]
	                                          	                      	 ]
	                                          	                     ],
	                                          	    {x,Dimensions[ppoints][[1]]}];
	                                          front=Flatten[Position[plist,True]];
	                                          portraitcoords=If[format>1,{Round[1+(#-Mod[#-1,pvals])/pvals],Mod[#-1,pvals]+1},{#,1}]&/@front;
	                                          {front,portraitcoords}]
(**************************************************************************************)
paretoplot3Dprojection[pp_,data1_,data2_,res_,cfn_,pmode_,cmode_]:=
Module[{paretomarkers=Switch[pmode,
	                         "numbers",
	                         Table[Text[Style[ToString[pp[[2]][[All,1]][[x]]],
	                         	              FontFamily->"Helvetica",
	                         	              FontWeight->Bold,
	                         	              FontSize->10,
	                         	              Switch[cmode,
	                         	              	     "simple",
	                         	              	     Black,
	                         	              	     "sparsity",
	                         	              	     cfn[pp[[2]][[All,2]][[x]]/Dimensions[data1][[2]]]]]],
	                         {x,1,Dimensions[pp[[2]][[All,1]]][[1]],res}],
	                         "points",
	                         Table[Graphics[{cfn[pp[[2]][[All,2]][[x]]/Dimensions[data1][[2]]],Point[{0,0}]}],
	                         {x,1,Dimensions[pp[[2]][[All,1]]][[1]],res}]]},
	    ListPlot[Table[{{Flatten[data1][[pp[[1]][[x]]]],Flatten[data2][[pp[[1]][[x]]]]}},
	    	           {x,1,Dimensions[pp[[2]]][[1]],res}],
	    	     PlotMarkers->paretomarkers,
	    	     PlotRange->All,
	    	     AxesOrigin->{0,0}]]
(**************************************************************************************)
triparetoplot[pp_,data1_,data2_,data3_,cmode_]:=
Module[{coords,
	    dims=Dimensions[pp],
	    a={0,0},
	    b={1,0},
        c={0.5,Sqrt[3]/2},
        pnts,
        frame,
        ft:=ColorData["TemperatureMap"],
        colors,
        labels,
        barycent\[Alpha],
        barycent\[Beta],
        barycent\[Gamma],
        d1min=Min[Flatten[data1]],
        d1max=Max[Flatten[data1]],
        d2min=Min[Flatten[data2]],
        d2max=Max[Flatten[data2]],
        d3min=Min[Flatten[data3]],
        d3max=Max[Flatten[data3]]},
        barycent\[Alpha]=Total[Sqrt[(c-b)^2]];
		barycent\[Beta]=Total[Sqrt[(a-c)^2]];
		barycent\[Gamma]=Total[Sqrt[(b-a)^2]];
		colors=Switch[cmode,"conns",pp[[2]][[All,1]]/Max[pp[[2]][[All,1]]],"sparsity",pp[[2]][[All,2]]/Max[pp[[2]][[All,2]]]];
		coords=Table[cartcoord[(Flatten[data1][[pp[[1]][[point]]]]-d1min)/(d1max-d1min),(Flatten[data2][[pp[[1]][[point]]]]-d2min)/(d2max-d2min),(Flatten[data3][[pp[[1]][[point]]]]-d3min)/(d3max-d3min),barycent\[Alpha],barycent\[Beta],barycent\[Gamma],a,b,c],{point,dims[[2]]}];
		pnts=Graphics[{PointSize[Large],
			           Table[{ft[colors[[x]]],Disk[coords[[x]],0.01]},
			                 {x,Dimensions[coords][[1]]}]},
			           ImageSize->300];
        frame=Graphics[{Thick,
        	            Line[{{0,0},{1,0},{0.5,Sqrt[3]/2},{0,0}}]},
        	           ImageSize->300];
        labels=Graphics[{Text[Style["Sep.",FontFamily->"Helvetica",FontWeight->Bold,FontSize->20],{-0.03,-0.03}],
        	             Text[Style["Eff.",FontFamily->"Helvetica",FontWeight->Bold,FontSize->20],{0.5,0.91}],
        	             Text[Style["Spa.",FontFamily->"Helvetica",FontWeight->Bold,FontSize->20],{1.03,-0.03}]}];
        Show[frame,labels,pnts]
      ]
(**************************************************************************************)
triparetoplot2[pp_,data1_,data2_,data3_,res_,pal_,fst_,fsp_]:=
Module[{coords,
	    dims=Dimensions[pp],
	    a={0,0},
        b={1,0},
        c={0.5,Sqrt[3]/2},
        pnts,
        frame,
        ft:=ColorData[pal],
        colors,
        labels,
        barycent\[Alpha],
        barycent\[Beta],
        barycent\[Gamma],
        d1min=Min[Flatten[data1]],
        d1max=Max[Flatten[data1]],
        d2min=Min[Flatten[data2]],
        d2max=Max[Flatten[data2]],
        d3min=Min[Flatten[data3]],
        d3max=Max[Flatten[data3]]},
        barycent\[Alpha]=Total[Sqrt[(c-b)^2]];
        barycent\[Beta]=Total[Sqrt[(a-c)^2]];
        barycent\[Gamma]=Total[Sqrt[(b-a)^2]];
        colors=Table[pp[[2]][[All,2]][[x]]/Max[pp[[2]][[All,2]]],{x,1,dims[[2]],res}];
        coords=Table[
        	       cartcoord[(Flatten[data1][[pp[[1]][[point]]]]-d1min)/(d1max-d1min),
        	       	         (Flatten[data2][[pp[[1]][[point]]]]-d2min)/(d2max-d2min),
        	       	         (Flatten[data3][[pp[[1]][[point]]]]-d3min)/(d3max-d3min),
        	       	         barycent\[Alpha],
        	       	         barycent\[Beta],
        	       	         barycent\[Gamma],a,b,c],
        	       {point,1,dims[[2]],res}];
        pnts=Graphics[Table[Text[Style[ToString[pp[[2]][[All,1]][[1+(x-1)*res]]],
        	                     FontFamily->font,
        	                     FontWeight->Bold,
        	                     FontSize->fsp,
        	                     ft[colors[[x]]]],
        	                     coords[[x]]],
        	          {x,Dimensions[coords][[1]]}],
        	          ImageSize->300];
        frame=Graphics[{Thick,
        	            Line[{{0,0},{1,0},{0.5,Sqrt[3]/2},{0,0}}]},
        	           ImageSize->300];
        labels=Graphics[{Text[Style["Sep.",
        	                        FontFamily->"Helvetica",
        	                        FontWeight->Bold,
        	                        FontSize->fst],{-0.03,-0.03}],
        	             Text[Style["Eff.",
        	             	        FontFamily->"Helvetica",
        	             	        FontWeight->Bold,
        	             	        FontSize->fst],{0.5,0.91}],
        	             Text[Style["Spa.",
        	             	        FontFamily->"Helvetica",
        	             	        FontWeight->Bold,
        	             	        FontSize->fst],{1.03,-0.03}]}];
        Show[frame,labels,pnts]]
(**************************************************************************************)
meanppnets[data_,pp3d_,maxd_]:=Module[{d,
	                                   clist,
	                                   out=Table[0,{x,maxd}],
	                                   olist=Table[0,{x,maxd}]},
	                                   For[d=1,d<= maxd,d++,
	                                   	          clist=If[Dimensions[Dimensions[#]][[1]]== 1,
	                                   	          	                  {#},
	                                   	          	                   #]&@pp3d[[2]][[Flatten[Position[pp3d[[2]][[All,1]],d]]]];
	                                   	          If[Dimensions[clist][[2]]>0,out[[d]]=Mean[Table[data[[clist[[y]][[1]]]][[clist[[y]][[2]]]],{y,Dimensions[clist][[1]]}]],out[[d]]=0];
	                                   	          If[Dimensions[clist][[2]]>0,olist[[d]]=Table[data[[clist[[y]][[1]]]][[clist[[y]][[2]]]],{y,Dimensions[clist][[1]]}],olist[[d]]={0}]];
	                                   {out,olist}]
(**************************************************************************************)
fulleff[info_,cost_]:=Table[Table[info[[1]][[d]][[\[Phi]]][[1]][[1]]/cost[[1]][[d]][[\[Phi]]][[1]],{\[Phi],d}],{d,Dimensions[info][[2]]}]
(**************************************************************************************)
tradeoffplot[data1_,data2_,data3_,raw1_,raw2_,raw3_,pp_,cfn1_,cfn2_,C1_,C2_,maxd_]:=
Module[{markers1,penalty,psns1,psns2,psns3,d1,d2,d3,clist,thr1,thr2,thr3,p1,p2},
	    d1=meanppnets[data1,pp,maxd][[2]];
        d1=Table[d1[[d]]/Max[d1],{d,maxd}];
        d2=meanppnets[data2,pp,maxd][[2]];
        d2=Table[d2[[d]]/Max[d2],{d,maxd}];
        d3=meanppnets[data3,pp,maxd][[2]];
        d3=Table[d3[[d]]/Max[d3],{d,maxd}];
		psns1=Table[Position[d1[[d]],Max[d1[[d]]]][[1]][[1]],{d,maxd}];
		psns2=Table[Position[d2[[d]],Max[d2[[d]]]][[1]][[1]],{d,maxd}];
		psns3=Table[Position[d3[[d]],Max[d3[[d]]]][[1]][[1]],{d,maxd}];
		clist=Table[pp[[2]][[Flatten[Position[pp[[2]][[All,1]],d]]]],{d,maxd}];
		thr1=Table[Table[Position[#,Max[#]][[1]][[1]]&@Table[raw1[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		thr2=Table[Table[Position[#,Max[#]][[1]][[1]]&@Table[raw2[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		thr3=Table[Table[Position[#,Max[#]][[1]][[1]]&@Table[raw3[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		markers1=Table[
			       Text[Style[ToString[thr1[[d]][[psns1[[d]]]]],
			       	    FontFamily->"Helvetica",
			       	    FontWeight->Bold,
			       	    FontSize->9,
			       	    cfn1[clist[[d]][[psns1[[d]]]][[2]]/Dimensions[data1][[2]]]]],
			       {d,maxd}];
		penalty=Table[(d2[[d]][[psns2[[d]]]]-d2[[d]][[psns1[[d]]]])+(d3[[d]][[psns3[[d]]]]-d3[[d]][[psns1[[d]]]]),{d,maxd}];
		p1=ListPlot[Table[{{d,d1[[d]][[psns1[[d]]]]}},{d,maxd}],
			        PlotRange->All,
			        AxesOrigin->{0,0},
			        PlotMarkers->markers1];
	    p2=ListPlot[{penalty,Table[d2[[d]][[psns1[[d]]]],{d,maxd}],Table[d3[[d]][[psns1[[d]]]],{d,maxd}]},
	    	         PlotRange->All,
	    	         AxesOrigin->{0,0},
	    	         Joined->True,
	    	         PlotStyle->{{Thick,Black},{Thick,C1,Dashed},{Thick,C2,Dashed}}];
	    Show[p1,p2]]
(**************************************************************************************)
limitpsparsity[pp_,min_,max_,pinc_]:=
Module[{desmin=Round[min/pinc],
	    desmax=Round[max/pinc],posns,out},
	    posns=Flatten[Position[IntervalMemberQ[Interval[{desmin,desmax}],
	    pp[[2]][[All,2]]],True]];
	    out=pp[[All,posns]];
	    out]
(**************************************************************************************)
pcodetable[data1_,data2_,data3_,raw1_,raw2_,raw3_,pp_,pini_,pinc_]:=
Module[{psns,d1,d2,d3,maxd=Dimensions[data1][[1]],clist,thr1,thr2,thr3,pins,pouts1,pouts2,pouts3,opts1,opts2,opts3},
	    d1=meanppnets[data1,pp,maxd][[2]];
        d2=meanppnets[data2,pp,maxd][[2]];
        d3=meanppnets[data3,pp,maxd][[2]];
        psns=Table[Position[d1[[d]],Max[d1[[d]]]][[1]][[1]],{d,maxd}];
        clist=Table[pp[[2]][[Flatten[Position[pp[[2]][[All,1]],d]]]],{d,maxd}];
        thr1=Table[If[Dimensions[#][[1]]>0,#[[psns[[d]]]],0]&@Table[Position[#,Max[#]][[1]][[1]]&@Table[raw1[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		thr2=Table[If[Dimensions[#][[1]]>0,#[[psns[[d]]]],0]&@Table[Position[#,Max[#]][[1]][[1]]&@Table[raw2[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		thr3=Table[If[Dimensions[#][[1]]>0,#[[psns[[d]]]],0]&@Table[Position[#,Max[#]][[1]][[1]]&@Table[raw3[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		opts1=Table[d1[[d]][[psns[[d]]]],{d,maxd}];opts2=Table[d2[[d]][[psns[[d]]]],{d,maxd}];
		opts3=Table[d3[[d]][[psns[[d]]]],{d,maxd}];
		pins=Table[If[Dimensions[#][[1]]>0,pini+(#[[psns[[d]]]][[2]]-1)*pinc,0]&@clist[[d]],{d,maxd}];pouts1=Table[If[#>0,Pout[d,pini+(clist[[d]][[psns[[d]]]][[2]]-1)*pinc,#],0]&@thr1[[d]],{d,maxd}];
		pouts2=Table[If[#>0,Pout[d,pini+(clist[[d]][[psns[[d]]]][[2]]-1)*pinc,#],0]&@thr2[[d]],{d,maxd}];
		pouts3=Table[If[#>0,Pout[d,pini+(clist[[d]][[psns[[d]]]][[2]]-1)*pinc,#],0]&@thr3[[d]],{d,maxd}];
		{{{opts1,thr1},{opts2,thr2},{opts3,thr3}},pins,{pouts1,pouts2,pouts3}}]
(**************************************************************************************)
prettycodetable[tabledata_]:=Module[{ptable=Table[0,{x,10}]},
	 								 ptable[[1]]=tabledata[[2]];
	 								 ptable[[2]]=tabledata[[1]][[1]][[1]];
	 								 ptable[[3]]=tabledata[[1]][[1]][[2]];
	 								 ptable[[4]]=tabledata[[3]][[1]];
	 								 ptable[[5]]=tabledata[[1]][[2]][[1]];
	 								 ptable[[6]]=tabledata[[1]][[2]][[2]];
	 								 ptable[[7]]=tabledata[[3]][[2]];
	 								 ptable[[8]]=tabledata[[1]][[3]][[1]];
	 								 ptable[[9]]=tabledata[[1]][[3]][[2]];
	 								 ptable[[10]]=tabledata[[3]][[3]];
	 								 Transpose[ptable]//TableForm]
(**************************************************************************************)
tradeoffchanges[data1_,data2_,data3_,raw1_,raw2_,raw3_,pp_,cfn1_,cfn2_,maxd_]:=
Module[{psns1,psns2,psns3,\[CapitalDelta]thr12,\[CapitalDelta]thr23,\[CapitalDelta]thr31,\[CapitalDelta]pin12,\[CapitalDelta]pin23,\[CapitalDelta]pin31,d1,d2,d3,clist,thr1,thr2,thr3},
	    d1=meanppnets[data1,pp,maxd][[2]];
		d1=Table[d1[[d]]/Max[d1],{d,maxd}];
		d2=meanppnets[data2,pp,maxd][[2]];
		d2=Table[d2[[d]]/Max[d2],{d,maxd}];
		d3=meanppnets[data3,pp,maxd][[2]];
		d3=Table[d3[[d]]/Max[d3],{d,maxd}];
		psns1=Table[Position[d1[[d]],Max[d1[[d]]]][[1]][[1]],{d,maxd}];
		psns2=Table[Position[d2[[d]],Max[d2[[d]]]][[1]][[1]],{d,maxd}];
		psns3=Table[Position[d3[[d]],Max[d3[[d]]]][[1]][[1]],{d,maxd}];
		clist=Table[pp[[2]][[Flatten[Position[pp[[2]][[All,1]],d]]]],{d,maxd}];
		thr1=Table[Table[Position[#,Max[#]][[1]][[1]]&@Table[raw1[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		thr2=Table[Table[Position[#,Max[#]][[1]][[1]]&@Table[raw2[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		thr3=Table[Table[Position[#,Max[#]][[1]][[1]]&@Table[raw3[[d]][[\[Phi]]][[clist[[d]][[y]][[2]]]],{\[Phi],d}],{y,Dimensions[clist[[d]]][[1]]}],{d,maxd}];
		\[CapitalDelta]thr12=Table[thr2[[d]][[psns2[[d]]]]-thr1[[d]][[psns1[[d]]]],{d,maxd}];
		\[CapitalDelta]thr23=Table[thr3[[d]][[psns3[[d]]]]-thr2[[d]][[psns2[[d]]]],{d,maxd}];
		\[CapitalDelta]thr31=Table[thr1[[d]][[psns1[[d]]]]-thr3[[d]][[psns3[[d]]]],{d,maxd}];
		\[CapitalDelta]pin12=Table[psns2[[d]]-psns1[[d]],{d,maxd}];
		\[CapitalDelta]pin23=Table[psns3[[d]]-psns2[[d]],{d,maxd}];
		\[CapitalDelta]pin31=Table[psns1[[d]]-psns3[[d]],{d,maxd}];
		{{\[CapitalDelta]thr12,\[CapitalDelta]thr23,\[CapitalDelta]thr31},{\[CapitalDelta]pin12,\[CapitalDelta]pin23,\[CapitalDelta]pin31}}]
(**************************************************************************************)
simplebar[data_,barcol_,op_,barwidth_,maxX_,maxY_,bcent_]:=
Module[{vals=Dimensions[data][[1]],bspace=barwidth/2},
	    Show[Table[
	    	   Plot[X=If[IntervalMemberQ[Interval[{bcent[[x]]-bspace,bcent[[x]]+bspace}],X],
	    	   	               data[[x]],
	    	   	               Null],
	    	   	   {X,0,maxX},
	    	   	   Filling->Axis,
	    	   	   PlotStyle->{Thin,barcol},
	    	   	   PlotStyle->Thick,
	    	   	   PlotRange->{{0,maxX},{0,maxY}},
	    	   	   AxesOrigin->{0,0},
	    	   	   FillingStyle->{op,barcol}],
	    	 {x,vals}]]]
(**************************************************************************************)
\[Mu]fromdex[dex_, pattfiles_, \[Mu]files_] := 
 Module[{candidates = Position[pattfiles, Flatten[pattfiles][[dex]]],plen, cdexs, \[Mu]dex, \[Mu]s}, 
         plen = Dimensions[candidates][[1]]; 
         \[Mu]dex =Table[candidates[[i]][[1]], {i, plen}]; 
         \[Mu]s = \[Mu]files[[\[Mu]dex]]; 
         cdexs = Table[Total[Table[Dimensions[pattfiles[[i]]][[1]], {i, \[Mu]dex[[j]] - 1}]] + 
                 Range[Dimensions[pattfiles[[\[Mu]dex[[j]]]]][[1]]], {j,Dimensions[\[Mu]dex][[1]]}]; 
         \[Mu]s[[Position[cdexs, dex][[1]][[1]]]][[1]]]
 (**************************************************************************************)   
plotcmat[data_, pattfiles_, \[Mu]files_, font_] := 
Module[{}, 
       MatrixPlot[data, 
       	          DataReversed -> {True, False}, 
       	          Mesh -> True, 
                  MeshStyle -> Gray, 
                  ColorFunction -> "TemperatureMap", 
                  ColorFunctionScaling -> False, 
                  ColorRules -> {0 -> Gray}, 
                  FrameTicks -> {Table[{x, \[Mu]fromdex[x, pattfiles, \[Mu]files]}, {x, 1, Dimensions[Flatten[pattfiles]][[1]], 5}], 
                  	  			 None, 
                  	  			 None,
                  				 Table[{x, \[Mu]fromdex[x, pattfiles, \[Mu]files]}, {x, 1, Dimensions[Flatten[pattfiles]][[1]], 5}]}, 
                  FrameTicksStyle -> Directive[FontFamily -> font, FontSize -> 12, FontWeight -> Bold],
                  FrameLabel -> {Style["No. Inputs", 
                  FontFamily -> font, 
                  FontSize -> 15, 
                  FontWeight -> Bold], 
                  None, 
                  None,
				  None}]]    
(**************************************************************************************)
corrmat[networklist_, capacitylist_, pini_, pinc_, pmax_, dmax_, dini_, path_, base_, kmode_,bfmode_,gain_:0] := 
Module[{info, n, c, kern, kernarr, corr, networks = Dimensions[networklist][[1]], capacities, sourceent, llfrac = 0.99,Rinput}, 
        capacities = Table[Dimensions[capacitylist[[n]]][[1]], {n, networks}]; 
        info = Table[0, {x, Total[capacities]}]; 
        kernarr = Table[0, {x, Total[capacities]}]; 
        sourceent = Switch[kmode, 
        	               "entropy", 
        	               Null, 
        	               "redundancy", 
        	               gensent[Union[networklist[[All, 1]]], capacitylist[[1]], pini, pinc, pmax],
        	               "DR",
        	               gensent[Union[networklist[[All, 1]]], 
        	               capacitylist[[1]], 
        	               pini, 
      					   pinc, 
      					   pmax]];
        Rinput=Switch[kmode,"entropy",Null,"redundancy",Null,"DR",
   	    genR[Union[networklist[[All, 1]]], capacitylist[[1]], pini, pinc, pmax]];  
        For[n = 1, n <= networks, n++, 
            For[c = 1, c <= capacities[[n]], c++, 
                  info[[c + Total[capacities[[1 ;; n]]] - capacities[[n]]]] = CnetLoad[path <> ToString[networklist[[n]][[1]]] <> "_" <> ToString[networklist[[n]][[2]]] <> Switch[bfmode, 
                  																																																		                             1, "_" <> ToString[capacitylist[[n]][[c]]] <> "/", 
                  																																																		                             0, "/"], 
                  																	   base,
                  																	   ".dat", 
                  																	   networklist[[n]][[1]], 
                  																	   networklist[[n]][[2]], 
                  																	   pini, 
                  																	   pmax, 
                  																	   pinc, 
                  																	   dini, 
                  																	   dmax, 
                  																	   Switch[bfmode, 1, capacitylist[[n]][[c]], 0, 0]]; 
    			  kern = Switch[kmode, 
    			  	            "entropy", 
                                maxinfo[info[[c + Total[capacities[[1 ;; n]]] - capacities[[n]]]]], 
                                "redundancy", 
                                optRpin[1, 
                                	    {info[[c + Total[capacities[[1 ;; n]]] - capacities[[n]]]]}, 
                                        sourceent[[indexfromnet[n, networklist]]][[c]], 
                                        1, 
                                        pinc, 
        								networklist[[n]][[2]], 
        								llfrac, 
        								"mins",
        								gain],
       							"DR",
       							 genDR[networklist[[n]][[2]],
       							 	   Rinput[[indexfromnet[n, networklist]]][[c]],
       							 	   {info[[c + Total[capacities[[1 ;; n]]] - capacities[[n]]]]},
       							 	   sourceent[[indexfromnet[n, networklist]]][[c]],
       							 	   llfrac,
       							 	   pini,
       							 	   pinc,
       							 	   pmax]];
    			 kernarr[[c + Total[capacities[[1 ;; n]]] - capacities[[n]]]] = kern
    			 ]
    		]; 
        corr = Correlation[Transpose[Table[Flatten[kernarr[[x]], 1], {x, Total[capacities]}]]]; 
        {corr,kernarr}]
(**************************************************************************************)    
netstats[poutfull_, sparsefull_, Rfull_, PRQfull_, corrfull_, pini_: 0, pinc_: 0, mode_: 1, pdex_: 0] := 
Module[{data, 
        items = {"Network", "Pout", "Sparsification", "Pr", "PRQ", "Corr"},
        table = Table[Table[0, {j, 6}], {i, 5}], 
        i, 
        j, 
        optpos, 
        dmax = Dimensions[poutfull][[1]], pvals}, 
        data = If[pdex == 0, {Thread[ReplaceAll[Thread[#], 0 -> \[Infinity]]] & /@ poutfull, 
        	                  sparsefull, 
        	                  Thread[ReplaceAll[Thread[#], 0 -> \[Infinity]]] & /@ Rfull, 
                              PRQfull, 
                              Thread[ReplaceAll[Thread[#], 0 -> \[Infinity]]] & /@ corrfull}, 
                             {Thread[ReplaceAll[Thread[#], 0 -> \[Infinity]]] & /@ Table[Table[{poutfull[[All, All, pdex]][[d]][[\[Phi]]]}, {\[Phi], d}], {d, dmax}], 
     						  Table[Table[{sparsefull[[All, All, pdex]][[d]][[\[Phi]]]}, {\[Phi], d}], {d, dmax}], 
                              Thread[ReplaceAll[Thread[#], 0 -> \[Infinity]]] & /@ Table[Table[{Rfull[[All, All, pdex]][[d]][[\[Phi]]]}, {\[Phi], d}], {d, dmax}], 
                              Table[Table[{PRQfull[[All, All, pdex]][[d]][[\[Phi]]]}, {\[Phi], d}], {d, dmax}], 
     						  Thread[ReplaceAll[Thread[#], 0 -> \[Infinity]]] & /@ Table[Table[{corrfull[[All, All, pdex]][[d]][[\[Phi]]]}, {\[Phi], d}], {d, dmax}]}]; 
  		pvals = Dimensions[data[[1]][[1]]][[2]];
  		data = If[mode == 0, 
  			        Table[
  			          Table[
  			          	Table[
  			              Table[
  			              	If[data[[1]][[d]][[\[Phi]]][[pd]] > If[pdex > 0, pini + pinc*(pdex - 1), pini + pinc*(pd - 1)], 
  			              		If[x == 2 || x == 4, -\[Infinity], \[Infinity]], 
  			              		data[[x]][[d]][[\[Phi]]][[pd]]], 
  			                {pd, pvals}], 
  			              {\[Phi], d}], 
  			            {d, dmax}], 
  			          {x, 5}], 
                  data];
        For[i = 1, i <= 5, i++, 
        	   optpos = Position[data[[i]], #][[1]] &@ If[i == 2 || i == 4, Max[data[[i]]], Min[data[[i]]]]; 
		 	   For[j = 1, j <= 6, j++, 
		 	   	      table[[i]][[j]] = If[j == 1, optpos, data[[j - 1, optpos[[1]], optpos[[2]], optpos[[3]]]]]
		 	   	  ]
		   ]; 
  	    PrependTo[Table[PrependTo[table[[x]], items[[x + 2]]], {x, Dimensions[table][[1]]}], PrependTo[items, " "]] 
  	    // TableForm]    
(**************************************************************************************)      
Plotinout[tc_, \[Mu]_, d_, \[Phi]_, \[Gamma]_, pon_,corr_:0,fs_:12,frame_:True] := 
Module[{A, 
	    outputs, 
	    rvals, 
	    inputs, 
	    tickformatA, 
	    tickformatB,
	    evenEVENTS=If[EvenQ[#] == True, #, # - 1] &@tc,
	    evenMF=If[EvenQ[#] == True, #, # - 1] &@(\[Mu]),
	    evenGC=If[EvenQ[#] == True, #, # - 1] &@(\[Gamma])},
	    
	    tickformatA={{1,evenEVENTS/2,evenEVENTS},{1,evenMF/2,evenMF}};
	    tickformatB={{1,evenEVENTS/2,evenEVENTS},{1,evenGC/2,evenGC}}; 
        A = Transpose[binmat[\[Gamma], \[Mu], d]]; 
        rvals=Table[Table[If[RandomReal[] <= pon, 1, 0], {x, 1, \[Mu]}],{x, 1, tc}];
                            inputs=If[corr<=0,rvals
                            	             ,Table[Flatten[
                            	             	    Table[
                            	             	    	Table[rvals[[x]][[a]], 
                            	             	    		 {b, Round[RandomVariate[ExponentialDistribution[1/corr], 1]+1][[1]]}], 
                            	             	    {a, \[Mu]}]][[1 ;; \[Mu]]],
                            	              {x, 1, tc}]	    
                            	     ];
        outputs = Boole[(Thread[#1 >= \[Phi]] & ) /@ Table[inputs[[x]] . A, {x, 1, tc}]]; 
        {MatrixPlot[inputs,
        	        DataReversed->{True,False},
		            AspectRatio->1,
		            FrameLabel->{Style["Event",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],Style["MF index",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold]},
		            ColorFunction -> "Monochrome",
		            FrameTicks -> tickformatA, 
		            Switch[frame,True,
			                         FrameTicksStyle->Directive[FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],
			                     False,
			                         Frame->frame]], 
	     MatrixPlot[outputs,
	     	        DataReversed->{True,False},
		            AspectRatio->1,
		            FrameLabel->{Style["Event",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],Style["GC index",FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold]},	
		            ColorFunction -> "Monochrome",
		            FrameTicks -> tickformatB,	        
		            Switch[frame,True,
			                         FrameTicksStyle->Directive[FontFamily->"Helvetica",FontSize->fs,FontWeight->Bold],
			                     False,
			                         Frame->frame]]}
	     ]
(**************************************************************************************)
Plotefficiency[meff_, cost_, info_, fileno_, maxd_] := 
Table[
	 Table[
           MatrixPlot[
	                  Flatten[info[[fileno]][[d]][[\[Phi]]], 1]/cost[[fileno]][[d]][[\[Phi]]]/meff, 
	                  PlotRange -> All, 
	                  ColorFunction -> ColorData["DeepSeaColors"], 
	                  ColorFunctionScaling -> False,AspectRatio -> 1], 
	 {\[Phi], 1, d}], 
{d, 1, maxd}]
(**************************************************************************************)	                                                         
hintonplot[areas_, colours_, colfunc_, pini_, b_: {-1}] := 
Module[{xini = 0, xinc = 1, yini = 0, yinc = 1, sfact = 0.65, blocks, markers, points, dims = Dimensions[areas], rc = {Lighter[Orange, 0.65], Lighter[Magenta, 0.65]}},
  		points = Table[Table[{xini + x*xinc, yini + y*yinc}, {x, dims[[2]]}], {y, dims[[1]]}];
        blocks = If[b[[1]] < 0, {}, Table[{rc[[x]], Rectangle[{b[[x]] - 0.5, 1 - 0.5}, {b[[x]] + 0.5, dims[[1]] + 0.5}]}, {x, Dimensions[b][[1]]}]]; 
        markers = Flatten[
        	           Table[
        	           	  Table[{If[# < 0, 
        	           	  	       If[MemberQ[b, points[[i]][[j]][[1]]] == True, rc, White], 
        	           	  	       colfunc[#]] &@colours[[i]][[j]], 
        	           	  	       Rectangle[{points[[i]][[j]][[1]] - (#/2), 
           						   points[[i]][[j]][[2]] - (#/2)}, 
           					    {points[[i]][[j]][[1]] + (#/2), points[[i]][[j]][[2]] + (#/2)}] &@ Sqrt[sfact*pini*areas[[i]][[j]]]}, {i, dims[[1]]}], 
           				    {j, dims[[2]]}]]; {points, markers, blocks}]	  
(**************************************************************************************)	       
showhintonplot[T_,fs_,ticks_:{{{10, 2}, {20, 3}, {30, 4}}, {1, 5, 10, 15, 20},None,None}]:=
Show[Graphics[T[[2]], 
	 Prolog -> T[[3]], 
	 Frame -> True, 
 	 FrameTicks -> ticks, 
 	 AspectRatio -> 1, 
     FrameTicksStyle -> Directive[FontFamily -> "Helvetica", FontSize -> fs, FontWeight -> Bold], 
     FrameLabel -> {Style["Gain", FontFamily -> "Helvetica", FontSize -> fs, FontWeight -> Bold], 
     Style["Synaptic connections", FontFamily -> "Helvetica", FontSize -> fs, FontWeight -> Bold]}]]
(**************************************************************************************)
rangeencoded[encdata_] := Table[Table[Dimensions[Position[encdata[[tdex, All, 1]], d]][[1]], {d,Dimensions[encdata][[1]]}], {tdex, Dimensions[encdata][[1]]}]         
(**************************************************************************************)
rangesparseencoded[encdata_,maxd_:20] := Table[
	                                 Table[
	                                       If[Dimensions[#][[1]] == 0, 
	 																-1, 
																	Dimensions[#][[1]]] &@(DeleteCases[#, -1] &@
																	encdata[[2, tdex, Flatten[Position[encdata[[1, tdex, All, 1]], d], 1]]]), 
										   {d, maxd}], 
								     {tdex, Dimensions[encdata][[2]]}]
(**************************************************************************************)
minsparsifiedpout[optsdata_] := Table[Min[
	  									Table[If[optsdata[[d, pdex, 3]] <= 0, 
	  																		\[Infinity], 
     																		optsdata[[d, pdex, 1]]], 
     										 {pdex, Dimensions[optsdata][[2]]}]], 
     							    {d,Dimensions[optsdata][[1]]}]
(**************************************************************************************)     							    
maxsparsifiedpout[optsdata_] := Table[Max[
									 Table[If[optsdata[[d, pdex, 3]] <= 0, 
									 								   -1, 
 																	   optsdata[[d, pdex, 1]]], 
 										  {pdex, Dimensions[optsdata][[2]]}]], 
 								     {d,Dimensions[optsdata][[1]]}]
(**************************************************************************************)
meansparseencoded[encdata_,maxd_:20] := Table[
									Table[
										  If[Dimensions[#][[1]] == 0, \[Infinity](*-1*), 
      																  Mean[#]] &@(DeleteCases[#, -1] &@
      																  encdata[[2, tdex, Flatten[Position[encdata[[1, tdex, All, 1]], d], 1]]]), 
      									 {d, maxd}], 
      								{tdex, Dimensions[encdata][[2]]}]                                           
(**************************************************************************************)  
minsparseencoded[encdata_,maxd_:20] := Table[
							       Table[
							       	     Min[If[# == -1, \[Infinity], #] & /@ 
							       	     encdata[[2, tdex, Flatten[Position[encdata[[1, tdex, All, 1]], d], 1]]]], 
							       	    {d, maxd}], 
							       {tdex, Dimensions[encdata][[2]]}]
(**************************************************************************************)    
maxsparseencoded[encdata_,maxd_:20] := Table[
								   Table[
								   	     Max[If[# == -1, 0, #] & /@ 
								   	     encdata[[2, tdex, Flatten[Position[encdata[[1, tdex, All, 1]], d], 1]]]], 
								   	    {d, maxd}], 
								   {tdex, Dimensions[encdata][[2]]}]  
(**************************************************************************************) 
markersfunc[series_, col_, smode_: 0, background_: None] := DeleteDuplicates[Flatten[
																			 Table[Text[Style[ToString[#], FontFamily -> "Helvetica", 
																			 	     					   FontWeight -> Bold, 
																			 	     					   FontSize -> 13, 
																			 	     					   col, 
																			 	     					   Background -> background]] & /@ 
																			 	     					   Flatten[Position[series, Sort[series, If[smode == 0, Less, Greater]][[x]]], 1], 
																			 	  {x, 20}]]]
(**************************************************************************************) 
indexedseries[indexseries_, series_,(*col_,*)smode_: 0] := series[[Flatten[DeleteDuplicates[
	 																					Table[Flatten[Position[indexseries, Sort[indexseries, If[smode == 0, Less, Greater]][[x]]], 1], 
	 																						 {x,20}]]]]]
(**************************************************************************************)  
End[] 
(* End Private Context *)
EndPackage[]
